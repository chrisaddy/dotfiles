#!/usr/bin/env -S nu --stdin
use std/assert


def ensure-db [] {
  if not ($in| path exists) {
    mkdir $in
  }

  let db = ($in | path join "bookmarks.db")
  if not ($db | path exists) {
    touch $db
  }
  assert ($in| path exists) 
  $db
}

def now [] {
  date now
  | date to-timezone UTC
  | format date "%Y-%m-%dT%H:%M:%SZ"
}


def extract-title [] {
  $in
  | lines
  | find --regex '.*?(<title>*>.*?</title>).*'
  | split row '<title>'
  | split row '</title>'
  | get 1
}

def create-bookmark [url: string, marked: bool] {
  let ts = (now)
  {
    title: (http get $url | extract-title)
    url: $url
    host: ($url | url parse | get host)
    created_at: $ts
    updated_at: $ts
    marked: $marked
    status: "UNREAD"
  }
}

def main [url: string] {
  let storage = $env.HOME
    | path join "marks"
    | ensure-db

  let bookmark = create-bookmark $url false

  $bookmark | into sqlite $storage -t bookmarks
  $bookmark | print
}

def "main mark" [url: string] {
  let storage = $env.HOME
    | path join "marks"
    | ensure-db
  create-bookmark $url true
  | into sqlite $storage -t bookmarks
  | print
}

def "main marks" [] {
  let storage = $env.HOME
    | path join "marks"
    | ensure-db

  let selection = open $storage
  | get bookmarks
  | each {|row| $"($row.title)\t($row.url)" }
  | str join "\n"
  | fzf --delimiter "\t" --with-nth 1 --expect ctrl-d,enter --bind 'ctrl-d:reload(echo {})'

  let key = ($selection | lines | first)
  let row = ($selection | lines | skip 1 | first)

  if ($key == "ctrl-d") {
    let url = ($row | split column "\t" | get column2).0
    let q = $"DELETE FROM bookmarks WHERE url = '($url)';"
    open $storage
    | query db $q
    | print $"deleting ($url)"
  } else if ($key == "enter") {
    let url = ($row | split column "\t" | get column2)
    /usr/bin/open $url.0
  }
}
